apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt' // required for Kotlin

android {
    compileSdkVersion 29

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def build = versionProps['VERSION_BUILD'].toInteger()

        defaultConfig {
            applicationId "com.amazmod.service"
            minSdkVersion 22
            //noinspection ExpiredTargetSdkVersion
            targetSdkVersion 23
            versionCode build
            versionName "${build}"

            if (branch == "dev") {
                versionNameSuffix "-" + branch
                setProperty("archivesBaseName", "AmazMod-$project.name")
            } else {
                setProperty("archivesBaseName", "AmazMod-$project.name-$versionCode")
            }
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release
    }

    buildTypes {
        all {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->

            def newApkName = ""
            def baseName = archivesBaseName
            def buildType = variant.buildType.name
            def date = new Date();
            def formattedDate = date.format('YYYYMMddHHmm', TimeZone.getTimeZone('UTC'))

            if (branch == "master") {
                if (buildType == "release") {
                    newApkName = "$baseName" + ".apk"
                } else if (buildType == "debug") {
                    newApkName = "$baseName-$buildType" + ".apk"
                }
            } else {
                newApkName =  "$baseName-$buildType-$branch-$versionCode-$formattedDate" + ".apk"
            }

            outputFileName = new File(newApkName)
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

}

dependencies {
    implementation project(':transport')
    implementation project(':models')
    implementation files('../libs/SpringboardPluginLib.jar')
    implementation files('../libs/huami_libs.jar')
    implementation files('../libs/WearServices_libs.jar')
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.emoji:emoji:1.1.0-rc01'
    implementation 'androidx.emoji:emoji-appcompat:1.1.0-rc01'
    implementation 'androidx.emoji:emoji-bundled:1.1.0-rc01'
    implementation 'com.mikepenz:iconics-core:3.0.4@aar'
    implementation 'com.mikepenz:iconics-views:3.0.4@aar'
    implementation 'com.mikepenz:google-material-typeface:3.0.1.2.original@aar'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.github.marlonlom:timeago:3.0.2'
    kapt 'com.jakewharton:butterknife-compiler:10.2.1'
    implementation 'com.jakewharton:butterknife:10.2.1'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'com.github.tbouron.shakedetector:library:1.0.0@aar'
    compileOnly 'com.google.android.wearable:wearable:2.7.0'
    implementation 'com.google.android.support:wearable:2.7.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    kapt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
    implementation "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
    implementation "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation "org.tinylog:tinylog-api:${tinylog_version}"
    implementation "org.tinylog:tinylog-api-kotlin:${tinylog_version}"
    implementation "org.tinylog:tinylog-impl:${tinylog_version}"
    implementation "androidx.core:core-ktx:1.3.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '$supportLibVersion'
            }
        }
    }
}


def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
}else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
